// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jeremie-abt/AmongUsBeautifulBot/iteration3/pkg/infra/framework (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/jeremie-abt/AmongUsBeautifulBot/iteration3/pkg/domain/entity"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddGame mocks base method
func (m *MockRepository) AddGame(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGame", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGame indicates an expected call of AddGame
func (mr *MockRepositoryMockRecorder) AddGame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGame", reflect.TypeOf((*MockRepository)(nil).AddGame), arg0)
}

// AddPlayer mocks base method
func (m *MockRepository) AddPlayer(arg0 string, arg1 *entity.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlayer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPlayer indicates an expected call of AddPlayer
func (mr *MockRepositoryMockRecorder) AddPlayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlayer", reflect.TypeOf((*MockRepository)(nil).AddPlayer), arg0, arg1)
}

// DeleteGame mocks base method
func (m *MockRepository) DeleteGame(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGame", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGame indicates an expected call of DeleteGame
func (mr *MockRepositoryMockRecorder) DeleteGame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGame", reflect.TypeOf((*MockRepository)(nil).DeleteGame), arg0)
}

// DeletePlayer mocks base method
func (m *MockRepository) DeletePlayer(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlayer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlayer indicates an expected call of DeletePlayer
func (mr *MockRepositoryMockRecorder) DeletePlayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlayer", reflect.TypeOf((*MockRepository)(nil).DeletePlayer), arg0, arg1)
}

// GetGame mocks base method
func (m *MockRepository) GetGame(arg0 string) (*entity.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGame", arg0)
	ret0, _ := ret[0].(*entity.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGame indicates an expected call of GetGame
func (mr *MockRepositoryMockRecorder) GetGame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGame", reflect.TypeOf((*MockRepository)(nil).GetGame), arg0)
}

// SetDeadPlayer mocks base method
func (m *MockRepository) SetDeadPlayer(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadPlayer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadPlayer indicates an expected call of SetDeadPlayer
func (mr *MockRepositoryMockRecorder) SetDeadPlayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadPlayer", reflect.TypeOf((*MockRepository)(nil).SetDeadPlayer), arg0, arg1)
}

// UpdatePlayer mocks base method
func (m *MockRepository) UpdatePlayer(arg0 string, arg1 *entity.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlayer indicates an expected call of UpdatePlayer
func (mr *MockRepositoryMockRecorder) UpdatePlayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayer", reflect.TypeOf((*MockRepository)(nil).UpdatePlayer), arg0, arg1)
}

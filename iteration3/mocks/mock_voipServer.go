// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jeremie-abt/AmongUsBeautifulBot/iteration3/pkg/infra/framework (interfaces: VoipServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/jeremie-abt/AmongUsBeautifulBot/iteration3/pkg/domain/entity"
	reflect "reflect"
)

// MockVoipServer is a mock of VoipServer interface
type MockVoipServer struct {
	ctrl     *gomock.Controller
	recorder *MockVoipServerMockRecorder
}

// MockVoipServerMockRecorder is the mock recorder for MockVoipServer
type MockVoipServerMockRecorder struct {
	mock *MockVoipServer
}

// NewMockVoipServer creates a new mock instance
func NewMockVoipServer(ctrl *gomock.Controller) *MockVoipServer {
	mock := &MockVoipServer{ctrl: ctrl}
	mock.recorder = &MockVoipServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVoipServer) EXPECT() *MockVoipServerMockRecorder {
	return m.recorder
}

// MuteAll mocks base method
func (m *MockVoipServer) MuteAll(arg0 *entity.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MuteAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MuteAll indicates an expected call of MuteAll
func (mr *MockVoipServerMockRecorder) MuteAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MuteAll", reflect.TypeOf((*MockVoipServer)(nil).MuteAll), arg0)
}

// UnMuteAll mocks base method
func (m *MockVoipServer) UnMuteAll(arg0 *entity.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnMuteAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnMuteAll indicates an expected call of UnMuteAll
func (mr *MockVoipServerMockRecorder) UnMuteAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnMuteAll", reflect.TypeOf((*MockVoipServer)(nil).UnMuteAll), arg0)
}

// UpdateColor mocks base method
func (m *MockVoipServer) UpdateColor(arg0 *entity.Game, arg1 *entity.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateColor indicates an expected call of UpdateColor
func (mr *MockVoipServerMockRecorder) UpdateColor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColor", reflect.TypeOf((*MockVoipServer)(nil).UpdateColor), arg0, arg1)
}

// UpdateName mocks base method
func (m *MockVoipServer) UpdateName(arg0 *entity.Game, arg1 *entity.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateName indicates an expected call of UpdateName
func (mr *MockVoipServerMockRecorder) UpdateName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateName", reflect.TypeOf((*MockVoipServer)(nil).UpdateName), arg0, arg1)
}
